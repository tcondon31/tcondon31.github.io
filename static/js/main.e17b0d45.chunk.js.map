{"version":3,"sources":["logo.svg","useWindowDimensions.jsx","components/TerrorDensityMap.js","App.jsx","reportWebVitals.js","index.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","TerrorDensityMap","data","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","onBeforeHover","console","log","layout","title","font","color","dragmode","mapbox","center","lat","lon","domain","x","y","style","zoom","automargin","paper_bgcolor","plot_bgcolor","showlegend","legend","text","config","responsive","mapboxAccessToken","process","processData","a","dfd","df","scatterData","grouped","groupby","Object","entries","colDict","map","latitude","long","longitude","attackType","keyToValue","nkills","nkill","year","iyear","month","imonth","day","iday","wounded","nwound","weapon","weaptype1_txt","target","targtype1_txt","group","gname","index","type","name","customdata","i","hovertemplate","App","setData","then","display","justifyContent","alignItems","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e17b0d45.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}","import Plotly from 'plotly.js-dist-min'\nimport Plot from 'react-plotly.js';\nimport useWindowDimensions from '../useWindowDimensions';\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n      width,\n      height\n    };\n  }\n\nexport const TerrorDensityMap = ({data}) => {\n    const { height, width } = useWindowDimensions();\n    return (\n        <Plot\n            onBeforeHover={console.log}\n            data={data}\n            layout={ {\n                title: 'Terrorist Attacks Around The World (1970-2019)',\n                font: { color: 'white'},\n                dragmode: 'zoom',\n                mapbox: {\n                    center: {\n                        lat: 38.03697222,\n                        lon: -90.70916722\n                      },\n                      domain: {\n                        x: [0, 1],\n                        y: [0, 1]\n                      },\n                      style: 'dark',\n                      zoom: 1\n                },\n                automargin: true,\n                paper_bgcolor: '#191A1A',\n                plot_bgcolor: '#191A1A',\n                showlegend: true,\n                legend: { title:\n                    { text: 'Type of Attack' }\n                },\n                height: height,\n                width: width,\n            } }\n            config = {{responsive: true, mapboxAccessToken: process.env.REACT_APP_MAPBOX_TOKEN}}>\n        </Plot>\n        /*\n        <Plot\n            data={[{\n                lon: longitude,\n                lat: latitude,\n                type: \"scattergeo\",\n                locations: 'iso-alpha',\n                color: 'continent',\n                hoverinfo: 'skip',\n                marker: {\n                    colorscale: 'Reds',\n                    size: kills,\n                    line: {\n                        color: 'black',\n                    },\n                },\n            }]}\n            layout={{\n                geo: {\n                    scope: 'world',\n                    resolution: 50\n                }\n            }}\n            //config = { {mapboxAccessToken: process.env.REACT_APP_MAPBOX_TOKEN} }\n            >\n        </Plot>\n        */\n    )\n}","import logo from './logo.svg';\nimport './App.css';\nimport * as dfd from \"danfojs\";\nimport { useState, useEffect } from 'react'\nimport { RevolvingDot } from  'react-loader-spinner'\nimport { TerrorDensityMap } from './components/TerrorDensityMap'\n\nconst processData = async () => {\n  let df = await dfd.readCSV('https://s3.us-east-2.amazonaws.com/misc.rajp33.com/globalterrorismdb_0221dist.csv');\n  return scatterData(df);\n}\n\nconst scatterData = (df) => {\n  const grouped = df.groupby(['attacktype1_txt']);\n\n  const lat = Object.entries(grouped.colDict).map(([key, value]) => {\n    return value.latitude;\n  })\n\n  const long = Object.entries(grouped.colDict).map(([key, value]) => {\n    return value.longitude;\n  })\n\n  let attackType = Object.entries(grouped.keyToValue).map(([key, value]) => {\n    return value;\n  })\n\n  attackType = attackType.map((a) => { return a[0] })\n\n  const nkills = Object.entries(grouped.colDict).map(([key, value]) => {\n    return value.nkill;\n  })\n\n  const year = Object.entries(grouped.colDict).map(([key, value]) => {\n    return value.iyear;\n  })\n\n  const month = Object.entries(grouped.colDict).map(([key, value]) => {\n    return value.imonth;\n  })\n\n  const day = Object.entries(grouped.colDict).map(([key, value]) => {\n    return value.iday;\n  })\n\n  const wounded = Object.entries(grouped.colDict).map(([key, value]) => {\n    return value.nwound;\n  })\n\n  const weapon = Object.entries(grouped.colDict).map(([key, value]) => {\n    return value.weaptype1_txt;\n  })\n\n  const target = Object.entries(grouped.colDict).map(([key, value]) => {\n    return value.targtype1_txt;\n  })\n\n  const group = Object.entries(grouped.colDict).map(([key, value]) => {\n    return value.gname;\n  })\n\n  const output = attackType.map((attackType, index) => {\n    return {\n      type: 'scattermapbox',\n      name: attackType,\n      lat: lat[index],\n      lon: long[index],\n      // customdata: [year[index], month[index], day[index], nkills[index]],\n      customdata: year[index].map((y, i) => `<b>Date:</b> ${month[index][i]}/${day[index][i]}/${y}<br>\n<b>Fatalities:</b> ${nkills[index][i]}<br>\n<b>Wounded:</b> ${wounded[index][i]}<br>\n<b>Weapon Used:</b> ${weapon[index][i]}<br>\n<b>Target:</b> ${target[index][i]}<br>\n<b>Terrorist Group:</b> ${group[index][i]}<br>`),\n      hovertemplate: '%{customdata}',\n   };\n  });\n  return output;\n}\n\nfunction App() {\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    processData().then(setData);\n  },[]);\n\n  return data ? (\n    <div\n    style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '100vh'}}>\n      <TerrorDensityMap \n        data={data}>\n      </TerrorDensityMap>\n    </div>\n  ) : <div\n    style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '100vh'}}>\n      <RevolvingDot color=\"#00BFFF\" height={200} width={200} />\n    </div>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}